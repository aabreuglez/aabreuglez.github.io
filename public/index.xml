<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adrián Abreu</title>
    <link>http://adrianabreu.github.io/index.xml</link>
    <description>Recent content on Adrián Abreu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>2017 Adrián Abreu</copyright>
    <lastBuildDate>Fri, 04 Aug 2017 16:37:11 +0000</lastBuildDate>
    <atom:link href="http://adrianabreu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Auto deployment en gh-pages con Travis</title>
      <link>http://adrianabreu.github.io/post/2017-08-04-Autodeploy-con-Travis/</link>
      <pubDate>Fri, 04 Aug 2017 16:37:11 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-08-04-Autodeploy-con-Travis/</guid>
      <description>&lt;p&gt;Una de las mejores características de github sin duda alguna, son las &lt;a href=&#34;https://pages.github.com/&#34;&gt;gh-pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las gh-pages nos permiten desplegar el código de nuestra aplicación frontend a través de esta rama, de tal forma que muchos de nuestros proyectos (por ejemplo este blog) estén disponibles sin tener limitaciones de hosting.&lt;/p&gt;

&lt;p&gt;Pero sin duda una desventaja es el hecho de tener que mantener el deploy de nuestras revisiones: cambiar de rama, eliminar el contenido, hacer una build y desplegar.&lt;/p&gt;

&lt;p&gt;¡Pero todo esto puede automatizarse mediante el uso de travis! &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis&lt;/a&gt; es una herramienta gratuita* que permite hacer integración continua (es la responsable de las famosas notas de la build).&lt;/p&gt;

&lt;p&gt;Como el procedimiento de activación de la cuenta es muy sencillo y hay decenas de tutoriales, voy a centrarme en el aspecto del deploy, que es lo realmente importante. Para ello usaré un script de gist y lo explicaré detalladamente:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/domenic/ec8b0fc8ab45f39403dd&#34;&gt;Fuente&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
set -e # Exit with nonzero exit code if anything fails

SOURCE_BRANCH=&amp;quot;master&amp;quot;
TARGET_BRANCH=&amp;quot;gh-pages&amp;quot;

function doCompile {
  ./compile.sh
}

# Pull requests and commits to other branches shouldn&#39;t try to deploy, just build to verify
if [ &amp;quot;$TRAVIS_PULL_REQUEST&amp;quot; != &amp;quot;false&amp;quot; -o &amp;quot;$TRAVIS_BRANCH&amp;quot; != &amp;quot;$SOURCE_BRANCH&amp;quot; ]; then
    echo &amp;quot;Skipping deploy; just doing a build.&amp;quot;
    doCompile
    exit 0
fi

# Save some useful information
REPO=`git config remote.origin.url`
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
SHA=`git rev-parse --verify HEAD`

# Clone the existing gh-pages for this repo into out/
# Create a new empty branch if gh-pages doesn&#39;t exist yet (should only happen on first deply)
git clone $REPO out
cd out
git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
cd ..

# Clean out existing contents
rm -rf out/**/* || exit 0

# Run our compile script
doCompile

# Now let&#39;s go have some fun with the cloned repo
cd out
git config user.name &amp;quot;Travis CI&amp;quot;
git config user.email &amp;quot;$COMMIT_AUTHOR_EMAIL&amp;quot;

# If there are no changes to the compiled out (e.g. this is a README update) then just bail.
if git diff --quiet; then
    echo &amp;quot;No changes to the output on this push; exiting.&amp;quot;
    exit 0
fi

# Commit the &amp;quot;changes&amp;quot;, i.e. the new version.
# The delta will show diffs between new and old versions.
git add -A .
git commit -m &amp;quot;Deploy to GitHub Pages: ${SHA}&amp;quot;

# Get the deploy key by using Travis&#39;s stored variables to decrypt deploy_key.enc
ENCRYPTED_KEY_VAR=&amp;quot;encrypted_${ENCRYPTION_LABEL}_key&amp;quot;
ENCRYPTED_IV_VAR=&amp;quot;encrypted_${ENCRYPTION_LABEL}_iv&amp;quot;
ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}
openssl aes-256-cbc -K $ENCRYPTED_KEY -iv $ENCRYPTED_IV -in ../deploy_key.enc -out ../deploy_key -d
chmod 600 ../deploy_key
eval `ssh-agent -s`
ssh-add deploy_key

# Now that we&#39;re all set up, we can push.
git push $SSH_REPO $TARGET_BRANCH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Revisemos poco a poco que hace este script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doCompile {
  ./compile.sh
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta función se encargará de compilar nuestro código, para un proyecto tipico quedaría&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doCompile {
  npm run build
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Saltaré las siguientes comprobaciones por son lo propio que explica el comentario, me centraré en este bloque:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone $REPO out
cd out
git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt; representa el directorio de salida de la compilación, en mi caso es dist, asi que lo modifico.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone $REPO dist
cd dist
git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Qué es lo que hace? Clona nuestro repositorio de nuevo en la carpeta de salida de nuestra build, se mete en ella y cambia de rama, de esta forma nuestra carpeta de salida estará vinculada a nuestra rama de gh-pages. En caso de que la rama no exista utiliza el parámetro &lt;code&gt;--orphan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Este parámetro es realmente interesante. Cuando creamos una rama en git normalmente partimos de un commit inicial. Por ejemplo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;master: A ----- B ----- C
                 \
gh-pages:         \----- D 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, cuando le decimos que es de tipo &lt;code&gt;orphan&lt;/code&gt; lo que hace es crear una rama totalmente desvinculada que tiene su propio initial commit y sus ficheros no están relacionados.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;master:   A ----- B ----- C

gh-pages: D ----- E ----- F 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto es precisamente lo que necesitamos para la rama de gh-pages, ya que solo va a incluir los ficheros de la carpeta de salida.&lt;/p&gt;

&lt;p&gt;Bien, el resto en general parece bastante claro, asi que pasemos a la parte final:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Get the deploy key by using Travis&#39;s stored variables to decrypt deploy_key.enc
ENCRYPTED_KEY_VAR=&amp;quot;encrypted_${ENCRYPTION_LABEL}_key&amp;quot;
ENCRYPTED_IV_VAR=&amp;quot;encrypted_${ENCRYPTION_LABEL}_iv&amp;quot;
ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}
openssl aes-256-cbc -K $ENCRYPTED_KEY -iv $ENCRYPTED_IV -in ../deploy_key.enc -out ../deploy_key -d
chmod 600 ../deploy_key
eval `ssh-agent -s`
ssh-add deploy_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con el objetivo de mejorar la seguridad utilizaremos un deploy_key. Lo que vamos a hacer es lo siguiente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generar una nueva clave de ssh &lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;tu@email.com&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Añadir la clave pública al repositorio en cuestión en la sección de &lt;strong&gt;&amp;ldquo;Deploy keys&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ahora es necesario que publiquemos nuestra clave privada en el repositorio, cosa que no es muy segura, asi que vamos a utilizar el &lt;a href=&#34;https://github.com/travis-ci/travis.rb&#34;&gt;cliente de travis&lt;/a&gt;. Nos logueamos utilizando &lt;code&gt;travis login&lt;/code&gt; y utilizamos la utilidad &lt;code&gt;travis encrypt-file&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La idea es generar el fichero &lt;code&gt;deploy_key.enc&lt;/code&gt; que utilizaremos en el script. A la salida nos saldrá un comando ssl que deberemos añadir, pero el script se preocupa de ello por nosotros, asi que solo necesitamos la cadena que sale entre _. Por ejemplo de &lt;code&gt;$encrypted_0a6446eb3ae3_key&lt;/code&gt; necesitamos &lt;code&gt;0a6446eb3ae3&lt;/code&gt;. Esta variable se irá al fichero .travis.yml.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Añadimos un fichero .travis.yml
```
language: generic # don&amp;rsquo;t install any environment&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;script: bash ./deploy.sh
env:
  global:
  - ENCRYPTION_LABEL: &amp;ldquo;&amp;lt;&amp;hellip;. encryption label from previous step &amp;hellip;.&amp;gt;&amp;rdquo;
  - COMMIT_AUTHOR_EMAIL: &amp;ldquo;you@example.com&amp;rdquo;
  ```&lt;/p&gt;

&lt;p&gt;Donde el encription label es la clave que hemos sacado del pasado anterior y el author email nuestro email.&lt;/p&gt;

&lt;p&gt;Con todo esto listo, cuando hagamos el próximo push a master, nuestro proyecto se compilará automáticamente y subirá el resultado a gh-pages.&lt;/p&gt;

&lt;p&gt;Si queréis ver algún ejemplo ahora mismo tengo dos proyectos utilizando esta configuración:
&lt;a href=&#34;https://github.com/adrianabreu/SIMDE-Simulator&#34;&gt;Simde Simulator&lt;/a&gt; y &lt;a href=&#34;https://github.com/adrianabreu/chuck-norris-angular-client&#34;&gt;Chuck Norris Angular Client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero que esto fomente la creación de muchísimos proyectos nuevos y que os animéis.&lt;/p&gt;

&lt;p&gt;* Gratuita con limitaciones, ya que no permite hacer la gestión de los repositorios privados si no &amp;ldquo;aflojas pasta&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mi experiencia con React</title>
      <link>http://adrianabreu.github.io/post/2017-07-28-Mi-experiencia-con-React/</link>
      <pubDate>Fri, 28 Jul 2017 17:11:10 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-07-28-Mi-experiencia-con-React/</guid>
      <description>&lt;p&gt;Hoy se cumple un mes desde que entregué mi trabajo de fin de grado. &lt;em&gt;(Modestia aparte, conseguí un 10)&lt;/em&gt;. Han pasado muchas cosas desde entonces, como que por ejemplo ahora mismo estoy viviendo en Barcelona y que trabajo para nada más y nada menos que &lt;strong&gt;Plain Concepts&lt;/strong&gt;. Pero al margen de eso, vamos a centrarnos en mi trabajo de fin de grado.&lt;/p&gt;

&lt;p&gt;En tercero de grado de ingeniería informática es posible escoger una especialidad. Yo descontento con la mayoría me decidí por Ingeniería de Computadores &lt;em&gt;a.k.a.&lt;/em&gt; Hardware. Y a lo largo de estos dos cursos me encontré con dos asignaturas de &lt;strong&gt;Arquitectura de Computadores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En la primera de ellas se explicaba el funcionamiento del paralelismo a nivel de instrucción (una conjunto de técnicas que permiten mejorar el rendimiento de los ordenadores y que es un concepto fundamental a día de hoy) mediante el uso de un simulador desarrollado en 2004: &lt;strong&gt;SIMDE&lt;/strong&gt;.&lt;/p&gt;

&lt;img src=&#34;http://adrianabreu.github.io/images/experiencia-react/simde-original.png&#34; class=&#34;responsive-img&#34;&gt;

&lt;p&gt;El uso de este simulador era bastante importante ya que hablamos de comprender en papel algoritmos de hace 40 años. Como por ejemplo el algoritmo de Tomasulo.&lt;/p&gt;

&lt;img src=&#34;http://adrianabreu.github.io/images/experiencia-react/tomasulo.png&#34; class=&#34;responsive-img&#34;&gt;

&lt;p&gt;Como os imaginareis es un suplicio usar este simulador. Aunque hace su cometido casi perfectamente se trata de una aplicación hecha en C++ 98 cuya documentación no es accesible y con un aspecto tosco y viejo.&lt;/p&gt;

&lt;p&gt;Una de las propuestas de este año fue: Convertirlo a web.&lt;/p&gt;

&lt;p&gt;Cuando salió esta propuesta me reuní con el profesor (¡el mismo que lo había desarrollado hace 13 años!) y jugué mi baza más importante: &lt;strong&gt;Aceptaría el tfg si se me daba libertad de usar lo que quisiera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Y así fue. Dediqué las navidades a investigar sobre como podría hacer las cosas y que podría utilizar. En aquel momento ya estaba trabajando con Angular asi que al menos sabía que quería &lt;em&gt;Typescript&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;No tenía muy claro la parte web, pero la verdad es que ya iba apuntando maneras. Sabía que iba a utilizar alguna librería para gestionar la aplicación porque:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No quería perder el tiempo haciendo bindings.&lt;/li&gt;
&lt;li&gt;Los componentes saltaban a la vista.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tras todo esto, me puse manos a la obra. Primero tuve que migrar muchísimo código C++ antiguo a Typescript y comprender el funcionamiento. Para ello utilicé de base un proyecto que había salido por enero que usaba Ava para ejecutar test.&lt;/p&gt;

&lt;p&gt;Al inicio del proyecto me encontré con tareas tan divertidas como reescribir el compilador del código ensamblador en Lex. Por suerte con una librería publicada en npm y escribiendo un wrapper para typescript, no fue nada difícil.&lt;/p&gt;

&lt;p&gt;Luego me tocó marearme mirando código y comprendiendo el modelo de la aplicación. Al tratarse un dominio tan específico era bastante difícil tener una visión clara de lo que se esperaba de la máquina.&lt;/p&gt;

&lt;p&gt;Una vez migradas las estructuras necesarias, me puse manos a la obra con React. &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;Con el tutorial oficial se puede llegar a comprender su funcionamiento de forma clara.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y luego llegó el momento clave:
¿Como conecto los objetos creados a React? Para solucionar esto fue tan sencillo como usar callbacks que se registraban en un objeto común que colgaba de windows. Con esto, cada iteración de la máquina llamaba a esos callbacks y refrescaba la vista.&lt;/p&gt;

&lt;p&gt;Aquí ya tuve un primer contacto maravilloso con React, y es que su flexibilidad me permitía seguir jugando con Javascript para solucionar mis problemas.&lt;/p&gt;

&lt;p&gt;El proyecto lo integré con Webpack y también utilicé Typescript con React. En general la experiencia fue positiva y me lo pasé muy bien, aunque me tuve que romper la cabeza algunas veces para comprender los errores.&lt;/p&gt;

&lt;p&gt;También me costó bastante conseguir empaquetar la app en modo producción, no recuerdo exactamente por qué, pero al final tenía el iconito verde maravilloso en la extensión de react-developer-tools. &lt;em&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en&#34;&gt;(Sí, hay una extensión de react para desarrollo y deberías utilizarla.)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Por falta de tiempo no integré ningún sistema de gestión de estados como &lt;strong&gt;Redux&lt;/strong&gt; o &lt;strong&gt;Mobx&lt;/strong&gt;, si no que me hice un time travelling casero. Funciona perfectamente y me hizo ganar muchos puntos antes el profesor y el tribunal.&lt;/p&gt;

&lt;p&gt;La idea es que para que un componente muestre su contenido debe transformar lo que le pasa el simulador. Así que tras realizar esta transformación este objeto se almacena en un array. Y si el usuario decide implementar time travelling no hace más que moverse en la interfaz a lo largo de este array, sin alterar la ejecución.&lt;/p&gt;

&lt;p&gt;Coincidiendo con mi incorporaicón a la empresa he aprovechado para añadirle un par de cosas al proyecto, que quizás puedan ser interesantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La aplicación tiene CD/CI con Travis. Ahora tras ejecutar los test (¡que tiene bastantes para la lógica!), la aplicación se despliega automáticamente en github-pages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Coveralls se encarga de mostrar el porcentaje de código cubierto. Otra característica muy agradable de ver.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;He añadido polyfills para aumentar la compatibilidad cross browser, ¡incluso funciona en Internet Explorer!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y ya que estoy, aprovecho para dejar un pequeño roadmap. De cara a un futuro cercano:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implementar algunas características de la versión antigua que se han quedado en el aire.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Actualizar a React fiber, la nueva versión de React mucho más rápida.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y bueno, ya con esto se cubren muchos casos. La verdad es que desarrollar una aplicación tan particular con React ha sido una maravilla. Si te has quedado con ganas de verla: &lt;a href=&#34;https://github.com/adrianabreu/SIMDE-Simulator&#34;&gt;aquí tienes su código fuente, que por cierto está bajo licencia GPLv3&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simde Simulator</title>
      <link>http://adrianabreu.github.io/projects/simde-simulator/</link>
      <pubDate>Wed, 28 Jun 2017 21:19:42 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/projects/simde-simulator/</guid>
      <description>&lt;p&gt;Herramienta de ayuda para la docencia de simuladores que representa el funcionamiento de una máquina superescalar.&lt;/p&gt;

&lt;p&gt;Construida sobre Typescript, React y Webpack, permite a cualquier usuario ver el flujo de las instrucciones a lo largo de su ejecución en la máquina y comprender conceptos tan fundamentales como: La predicción de saltos; el funcionamiento el algoritmo de Tomasulo&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezar a programar</title>
      <link>http://adrianabreu.github.io/post/2017-06-04-Empezar-a-programar/</link>
      <pubDate>Sun, 04 Jun 2017 13:07:30 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-06-04-Empezar-a-programar/</guid>
      <description>

&lt;p&gt;Creo que me he visto en más de una decena de ocasiones aconsejando a gente como empezar en el mundo
de la programación, así que esta entrada viene dedicada a todos ellos.&lt;/p&gt;

&lt;p&gt;Por supuesto se trata de una guía basada en mi opinión y solo mi opinión.&lt;/p&gt;

&lt;h3 id=&#34;daw-o-dam&#34;&gt;¿DAW o DAM?&lt;/h3&gt;

&lt;p&gt;Realmente mi respuesta es bastante clara: &lt;strong&gt;DAW&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;El mundo web cada vez va tomando más y más fuerza.
Ya se pueden desarrollar aplicaciones de escritorio utilizando como base aplicaciones web con tecnologías
como &lt;a href=&#34;https://electron.atom.io/&#34;&gt;electron&lt;/a&gt; (un buen ejemplo de este tipo de aplicaciones &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;). Y además también
se pueden desarrollar aplicaciones móviles con &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; e &lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;como-empezar&#34;&gt;¿Como empezar?&lt;/h3&gt;

&lt;p&gt;Fundamentos. Programar siempre va a ser programar, sea cual sea el lenguaje.
No vas a perder mucho por empezar por C y luego ir a Java. A mí me gusta mucho enseñar con C y C++. ¿Por qué? Porque se puede uno concentrar en los fundamenos básicos de la
programación estructurada y luego en la orientación a objetos.&lt;/p&gt;

&lt;p&gt;Pero esto, si no tienes claro lo que quieres hacer, puede resultar bastante desmotivante. Y mucha gente
necesita una mayor motivación, la cual consigue pensando en la aplicación directa de las cosas. No puedo culparlos. Así que vamos a centrarnos
en las dos tecnologías más usadas: Java y Javascript.&lt;/p&gt;

&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;

&lt;p&gt;Java es un lenguaje compilado e interpretado desarrollado por &lt;em&gt;Sun Mycrosystems&lt;/em&gt; ampliamente utilizado en el mundo web. Mediante la especificación de JavaEE se puede lograr que Java gestione peticiones web y actuar
como un lenguaje del servidor. Normalmente se utiliza junto a la tecnología &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Y es realmente potente. Java es un lenguaje muy rapido que no ha parado de mejorar durante todos estos
años. Puede que no sea &amp;ldquo;cool&amp;rdquo;, que no esté en el top de &lt;em&gt;trending languages&lt;/em&gt;, &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;pero es el top 1 en los lenguajes más utilizados y eso no se puede discutir&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para aprender Java recomiendo utilizar los dos &lt;em&gt;MOOC&lt;/em&gt; (Masive Open Online Course) de la universidad
de Helsinki. Yo mismo los he utilizado y sé que resultarán muy útiles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mooc.fi/courses/2013/programming-part-1/&#34;&gt;http://mooc.fi/courses/2013/programming-part-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mooc.fi/courses/2013/programming-part-2/&#34;&gt;http://mooc.fi/courses/2013/programming-part-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eso sí, en perfecto inglés. Es lo que hay y cuanto antes empieces a adaptarte al inglés, mejor. Existen
algunos libros muy importantes de Java, yo suelo citar este:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Effective Java&lt;/em&gt;, Josucha Bloch, 2nd Edition.&lt;/p&gt;

&lt;p&gt;Y como recursos online para consultar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tutorialspoint.com/java/&#34;&gt;https://www.tutorialspoint.com/java/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mkyong.com/&#34;&gt;https://www.mkyong.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;javascript&#34;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;Javascript es un lenguaje compilado e interpretado (surprise!), desarrollado por Brendan Eich para ser
utilizado en el navegador. Con la aparición de las aplicaciones web dinámicas que hacían uso de Ajax
(Gmail), comenzó una tendencia hacia un nuevo tipo de arquitectura.&lt;/p&gt;

&lt;p&gt;Javascript es un lenguaje que ha cogido una gran fama en los últimos años. Es el lenguaje más utilizado en
Github y además con la fama que han ido adquiriendo las librerías y frameworks, es un gran momento para
aprenderlo.&lt;/p&gt;

&lt;p&gt;Para ello recomiendo hacer los cursos de &lt;a href=&#34;https://www.freecodecamp.com/&#34;&gt;freecodecamp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para dudas, un libro bastante interesante a consultar es: &lt;a href=&#34;http://eloquentjavascript.net/&#34;&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;qué-debo-aprender&#34;&gt;¿Qué debo aprender?&lt;/h3&gt;

&lt;p&gt;En esto si que solemos coincidir todos, para empezar a programar se deben comprender estos conceptos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipos de datos.&lt;/li&gt;
&lt;li&gt;Entrada / salida de datos.&lt;/li&gt;
&lt;li&gt;Condicionales. (if)&lt;/li&gt;
&lt;li&gt;Bucles. (for, while&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Funciones.&lt;/li&gt;
&lt;li&gt;Estructuras de datos básicas (Arrays, Listas).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto es lo que daría cualquier persona que empezara a programar. Una vez comprendido y entendido esto,
pasaríamos a la programación Orientada a Objetos y a estructuras más avanzadas.&lt;/p&gt;

&lt;p&gt;Y ya con eso tenemos las bases para empezar a hacer lo que realmente nos importa: Resolver problemas.&lt;/p&gt;

&lt;h3 id=&#34;ya-tengo-las-bases-quiero-más&#34;&gt;Ya tengo las bases, quiero más.&lt;/h3&gt;

&lt;p&gt;En un principio iba a extender este tutorial, pero creo que es mejor dejarlo para otra entrada.
Por lo pronto diré que al menos es necesario que conozcas como usar SQL, qué es una &lt;a href=&#34;http://www.restapitutorial.com/&#34;&gt;API Rest&lt;/a&gt;
y como hacer peticiones &lt;a href=&#34;https://www.w3schools.com/xml/ajax_xmlhttprequest_send.asp&#34;&gt;HTTP con Javascript&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://adrianabreu.github.io/post/2017-04-09-Docker/</link>
      <pubDate>Sun, 09 Apr 2017 15:20:44 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-04-09-Docker/</guid>
      <description>

&lt;h2 id=&#34;qué-es-docker&#34;&gt;¿Qué es docker?&lt;/h2&gt;

&lt;p&gt;Docker es un software que permite automatizar el despliegue de aplicaciones utilizando contenedores.&lt;/p&gt;

&lt;p&gt;Los contenedores hacen uso de la virtualización a nivel de sistema operativo, con lo cual son mucho más ligeros y rápidos que las máquinas virtuales.&lt;/p&gt;

&lt;h2 id=&#34;para-qué-lo-puedo-necesitar&#34;&gt;¿Para qué lo puedo necesitar?&lt;/h2&gt;

&lt;p&gt;En el día a día, una de las cosas para las que Docker me resulta más útil sin duda es para desplegar las bases de datos en desarrollo.&lt;/p&gt;

&lt;p&gt;Sobre todo cuando trabajas con múltiples bases de datos, estar instalandos los distintos tipos: oracle, postgres, mysql, etcétera. No resulta del todo sencillo, y con docker se convierte en una tarea trivial.&lt;/p&gt;

&lt;p&gt;También podemos utilizarlo para emparejar el entorno de desarrollo y producción (mantener mismas versiones y así asegurarnos de que no hay incompatibilidades).&lt;/p&gt;

&lt;h2 id=&#34;y-no-me-sirve-vagrant&#34;&gt;¿Y no me sirve Vagrant?&lt;/h2&gt;

&lt;p&gt;Por supuesto. Docker no es más que otra solución. Mucha gente ha trabajado hasta ahora utilizando Vagrant para automatizar el despliegue de sus máquinas virtuales, y creo que la mejor forma de comprender las diferencias entre una máquina virtual y un contenedor, es con la siguiente imagen:&lt;/p&gt;

&lt;img src=&#34;https://insights.sei.cmu.edu/assets/content/VM-Diagram.png&#34; class=&#34;responsive-img&#34;&gt;

&lt;p&gt;Eliminando las capas de hypervisor y de sistema operativo invitado, nos ahorramos muchísimos recursos y ganamos en velocidad. (¿Quién no ha tenido que esperar tras un vagrant up?)&lt;/p&gt;

&lt;h2 id=&#34;cómo-lo-utilizo&#34;&gt;¿Cómo lo utilizo?&lt;/h2&gt;

&lt;p&gt;Obviamente, el primer paso es instalarlo. Como curiosidad, solo hay una versión de Windows que soporta docker de forma nativa, pero se puede utilizar igualmente mediante una máquina virtual.&lt;/p&gt;

&lt;p&gt;Tras instalar Docker, vamos a buscar imágenes de docker en &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo, yo ahora mismo necesito una base de datos de postgres. Así que me utilizaré esta imagen, que es oficial: &lt;a href=&#34;https://hub.docker.com/_/postgres/&#34;&gt;https://hub.docker.com/_/postgres/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Realmente, podría automatizar todo el proceso de despliegue y docker podría buscar por mí en el hub y bajarme la imagen con el comando que pone en la guía, pero creo que es mejor hacerlo a mano para esta entrada.&lt;/p&gt;

&lt;p&gt;En mi caso voy a utilizar la versión 9.5 de docker por temas de compatibilidad con la versión de pgAdminIII que utilizo. Recomiendo encarecidamente utilizar la 9.6 para no tener que estar esperando por las actualizaciones.&lt;/p&gt;

&lt;p&gt;Bajamos la carpeta con el dockerfile, nos movemos a la ruta correspondiente, y ejecutamos &lt;code&gt;docker build -t &amp;quot;postgres:9.5&amp;quot; .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;El flag -t no es más que un tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adrianabreu@adrianabreu-CX61-2PC:~/docker-images/postgres/9.5$ docker build -t &amp;quot;postgres:9.5&amp;quot; .
Sending build context to Docker daemon 19.97 kB
[...]
Step 23/23 : CMD postgres
 ---&amp;gt; Running in 635831399de8
 ---&amp;gt; e8635acd406b
Removing intermediate container 635831399de8
Successfully built e8635acd406b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, podemos ver que se ha añadido la imagen correspondiente con: &lt;code&gt;docker images&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adrianabreu@adrianabreu-CX61-2PC:~/docker-images/postgres/9.5$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
postgres            9.5                 e8635acd406b        About a minute ago   265 MB
debian              jessie              8cedef9d7368        2 weeks ago          123 MB
hello-world         latest              48b5124b2768        2 months ago         1.84 kB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vale, lancemos una nueva instancia de postgres:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name prueba-postgres -e POSTGRES_PASSWORD=prueba -P -d postgres:9.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota: El flag -P es MUY importante, es el que se encarga de publicar el puerto del contenedor al sistema operativo.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comprobemos que ha arrancado:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
111090b29e46        postgres:9.5        &amp;quot;docker-entrypoint...&amp;quot;   13 seconds ago      Up 11 seconds       0.0.0.0:32770-&amp;gt;5432/tcp   prueba-postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como vemos, nuestro docker está escuchando en el puerto 32770. Hagamos a hacer la prueba de fuego:&lt;/p&gt;

&lt;img src=&#34;http://adrianabreu.github.io/images/docker-pgadmin.png&#34; class=&#34;responsive-img&#34;&gt;

&lt;p&gt;¡Perfecto! Espero que esto os anime a usar docker y ganéis la flexibilidad que necesitáis.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capas en el backend</title>
      <link>http://adrianabreu.github.io/post/2017-04-08-Capas-en-el-backend/</link>
      <pubDate>Sat, 08 Apr 2017 17:33:10 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-04-08-Capas-en-el-backend/</guid>
      <description>

&lt;p&gt;Una de las cosas más difíciles cuando ves un proyecto de backend por primera vez es discernir la funcionalidad y responsabilidad de las distintas capas. Así que me he planteado dar una visión general.&lt;/p&gt;

&lt;p&gt;Antes de nada, quiero aclarar que es probable que esta nomenclatura no coincida con otra que veais por ahí, existen muchos sinónimos para los mismos conceptos, yo por mi parte, voy a explicar cual utilizo actualmente.&lt;/p&gt;

&lt;p&gt;Por supuesto, todo estará ilustrado con un sencillo proyecto de ejemplo que he hecho para la ocasión. Así que, comencemos por el patrón DTO.&lt;/p&gt;

&lt;h2 id=&#34;data-transfer-object&#34;&gt;Data Transfer Object&lt;/h2&gt;

&lt;p&gt;Un DTO es un objeto que se utiliza en transferencias. Existen varios motivos para utilizar este tipo de objeto:&lt;/p&gt;

&lt;p&gt;El motivo original es que con lo costoso que resulta abrir un canal de comunicación, debería traerse toda la información posible en esta para &amp;ldquo;amortizarla&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;No siempre es necesario mandar al front end todos los campos del backend. Quizás algunos campos sean de control, o quizás no necesitemos transferir todo el objeto.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GreetingDTO {

	private Long id;
	
	private String message;

	
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapper&#34;&gt;Mapper&lt;/h2&gt;

&lt;p&gt;Para convertir las entidades en DTO y viceversa, utilizamos un mapper. Aquí un breve ejemplo. Nótese que lo he anotado como un componente de Spring con @Component.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component
public class GreetingMapper {

	public GreetingDTO toDTO(Greeting source) {
		if (source == null) {
			return null;
		}
		
		GreetingDTO target = new GreetingDTO();
		target.setId(source.getId());
		target.setMessage(source.getMessage());
		return target;
	}
	
	public Greeting toEntity(GreetingDTO source) {
		if (source == null) {
			return null;
		}
		
		Greeting target = new Greeting();
		target.setId(source.getId());
		target.setMessage(source.getMessage());
		return target;
	}
	
	public List&amp;lt;GreetingDTO&amp;gt; toDTOList(List&amp;lt;Greeting&amp;gt; source) {
		if (source == null) {
			return null;
		}
		List&amp;lt;GreetingDTO&amp;gt; target = source.stream().map(greeting -&amp;gt; toDTO(greeting)).collect(Collectors.toList());
		return target;	
	}
	
	public List&amp;lt;Greeting&amp;gt; toEntityList(List&amp;lt;GreetingDTO&amp;gt; source) {
		if (source == null) {
			return null;
		}
		List&amp;lt;Greeting&amp;gt; target = source.stream().map(greetingDTO -&amp;gt; toEntity(greetingDTO)).collect(Collectors.toList());
		return target;
				
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resource-controller&#34;&gt;Resource / Controller&lt;/h2&gt;

&lt;p&gt;Los controladores (denominados también recursos) van a ser los encargados de relacionar tal acción cuando ejecutemos X método HTTP (GET, POST, PUT, DELETE&amp;hellip;) sobre Y ruta (/users, /greetings).&lt;/p&gt;

&lt;p&gt;Es importante separar la lógica de negocio del controlador. Por lo general, un controlador solo debería llamar a los mapper y a los servicios que correspondan.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RequestMapping(&amp;quot;/greetings&amp;quot;)
@RestController
public class GreetingResource {

	@Autowired
	private GreetingService greetingService;
	
	@Autowired
	private GreetingMapper greetingMapper;
	
    @GetMapping(&amp;quot;&amp;quot;)
    public List&amp;lt;GreetingDTO&amp;gt; obtener() {
    	List&amp;lt;Greeting&amp;gt; greetings = greetingService.findAll();
    	List&amp;lt;GreetingDTO&amp;gt; greetingDTOs = greetingMapper.toDTOList(greetings);
    	return greetingDTOs;
    }
    
    
    @PostMapping(&amp;quot;&amp;quot;)
    public GreetingDTO crear(GreetingDTO greetingDTO) {
    	Greeting greeting = greetingMapper.toEntity(greetingDTO);
    	greeting = greetingService.save(greeting);
    	greetingDTO = greetingMapper.toDTO(greeting);
    	
    	return greetingDTO;
    }
    
    @GetMapping(&amp;quot;/{id}&amp;quot;)
    public GreetingDTO optenerPorId(@PathVariable(value=&amp;quot;id&amp;quot;) Long greetingId) {
    	Greeting greeting = greetingService.findOneById(greetingId);
    	GreetingDTO greetingDTO = greetingMapper.toDTO(greeting);
    	return greetingDTO;
    }
    
    @DeleteMapping(&amp;quot;/{id}&amp;quot;)
    public ResponseEntity borrar(@PathVariable(value=&amp;quot;id&amp;quot;) Long greetingId) {
    	greetingService.delete(greetingId);
    	return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.OK);
    }
    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;

&lt;p&gt;La capa de servicio es la capa que se encargará de gestionar la lógica de negocio y de &amp;ldquo;enmascarar&amp;rdquo; la capa de acceso a los datos.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class GreetingService {
	
	@Autowired
	private GreetingRepository greetingRepository;
	
	
	public List&amp;lt;Greeting&amp;gt; findAll() {
		return greetingRepository.findAll();
	}
	
	public Greeting findOneById(Long id) {
		return greetingRepository.findOneById(id);
	}
	
	public Greeting save(Greeting greeting) {
		// Usando la lógica de negocio modificamos los campos que solo nos interesan de la entidad
		greeting.setUpdated(Boolean.TRUE);
		return greetingRepository.save(greeting);
	}
	
	public void delete(Long id) {
		greetingRepository.delete(id);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;

&lt;p&gt;La capa de repository se encargará de acceder a los datos. Para este ejemplo tan sencillo he utilizado como almacenamiento un HashMap.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Repository
public class GreetingRepository {

	private AtomicInteger idCounter = new AtomicInteger();
	private HashMap&amp;lt;Long,Greeting&amp;gt; greetings = new HashMap();
	
	public List&amp;lt;Greeting&amp;gt; findAll() {
		return new ArrayList&amp;lt;Greeting&amp;gt;(greetings.values());
	}
	
	public Greeting findOneById(Long id) {
		return greetings.get(id);
	}
	
	public Greeting save(Greeting greeting) {
		greeting.setId(idCounter.longValue());
		greetings.put(idCounter.longValue(), greeting);
		idCounter.incrementAndGet();
		return greeting;
	}
	
	public void delete(Long id) {
		greetings.remove(id);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para demostrar que el ejemplo funciona correctamente, haré algunas peticiones REST. Para esto, utilizo normalmente el cliente &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Primero, almacenaremos dos objetos.
&lt;img src=&#34;http://adrianabreu.github.io/images/capas-backend/1.png&#34; class=&#34;responsive-img&#34;&gt;&lt;/p&gt;

&lt;p&gt;Después, recuperaremos la lista de objetos.
&lt;img src=&#34;http://adrianabreu.github.io/images/capas-backend/2.png&#34; class=&#34;responsive-img&#34;&gt;&lt;/p&gt;

&lt;p&gt;Por último, borremos uno de ellos.
&lt;img src=&#34;http://adrianabreu.github.io/images/capas-backend/3.png&#34; class=&#34;responsive-img&#34;&gt;&lt;/p&gt;

&lt;p&gt;Como vemos, las diferentes capas en la aplicación hacen una gran separación de responsabilidades. Dandonos una estructura clara y robusta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adrianabreu/spring-layers-example&#34;&gt;Aquí tenéis el proyecto completo en Github&lt;/a&gt;, para poder ver el código completo.&lt;/p&gt;

&lt;h2 id=&#34;bibliografía&#34;&gt;Bibliografía&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/eaaCatalog/dataTransferObject.html&#34;&gt;https://martinfowler.com/eaaCatalog/dataTransferObject.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/eaaCatalog/serviceLayer.html&#34;&gt;https://martinfowler.com/eaaCatalog/serviceLayer.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/eaaCatalog/applicationController.html&#34;&gt;https://martinfowler.com/eaaCatalog/applicationController.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Interacción a través de ViewChild en Angular</title>
      <link>http://adrianabreu.github.io/post/2017-03-24-Interaccion-a-traves-de-viewchild/</link>
      <pubDate>Fri, 24 Mar 2017 23:11:22 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-03-24-Interaccion-a-traves-de-viewchild/</guid>
      <description>&lt;p&gt;Hoy me he encontrado con una situación peculiar en un código. Aunque considero que quizás como está realizada la tarea no sea la mejor opción, creo que es un buen ejemplo para entender algunos conceptos de Angular.&lt;/p&gt;

&lt;p&gt;Partiendo de una aplicaicón muy básica donde tenemos dos componentes: &lt;strong&gt;AppComponent&lt;/strong&gt; y &lt;strong&gt;ChildComponent&lt;/strong&gt;, vamos a renderizar dinámicamente el componente hijo desde el componente padre y ejecutar una serie de acciones.&lt;/p&gt;

&lt;p&gt;Empecemos por el componente padre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;
  {{title}}
&amp;lt;/h1&amp;gt;

&amp;lt;button type=&amp;quot;button&amp;quot; (click)=&amp;quot;renderChildAndDoChildStuff()&amp;quot;&amp;gt;Render the child!&amp;lt;/button&amp;gt;
&amp;lt;child *ngIf=&amp;quot;timeToRenderChild&amp;quot;&amp;gt;&amp;lt;/child&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;app.component.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Component, ViewChild } from &#39;@angular/core&#39;;
import { ChildComponent } from &#39;./child/child.component&#39;;

@Component({
  selector: &#39;app-root&#39;,
  templateUrl: &#39;./app.component.html&#39;,
  styleUrls: [&#39;./app.component.css&#39;]
})
export class AppComponent {
  title = &#39;app works!&#39;;

  @ViewChild(ChildComponent)
  private childComponent: ChildComponent;

  private timeToRenderChild: boolean;

  constructor() {
    this.timeToRenderChild = false;
  }

  renderChildAndDoChildStuff() {
    this.timeToRenderChild = true;
    this.childComponent.doStuff();
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;app.component.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Varios detalles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;La directiva ngIf hace que hasta que no se cumpla la condición no empiece el renderizado del componente hijo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;El decorator @ViewChild permite que un componente padre acceda a las propiedades de un componente hijo.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La funcion doStuff no hace más que modificar un valor de texto en el componente hijo. ¿Que pasa cuando hacemos click en el botón?&lt;/p&gt;

&lt;img src=&#34;http://adrianabreu.github.io/images/error-viewchild-lifecycle.png&#34; class=&#34;responsive-img&#34;&gt;

&lt;p&gt;Tenemos un error, que nos dice que nuestro componente aún está en estado undefined.
¿Como podemos saber que nuestro componente está listo?&lt;/p&gt;

&lt;p&gt;Aquí entran en juego los &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html&#34;&gt;lifecycle hooks&lt;/a&gt;. Si utlizamos OnInit, ya estará nuestro componente resuelto. Pero, y aquí el quid del post, aún falta una cosa. Y es que el componente padre sepa que el hijo ha terminado de instanciarse. En un principio notificar una acción de un componente hijo a un componente padre es tan sencillo como usar un evento.&lt;/p&gt;

&lt;p&gt;Pero esto no es suficiente: Cuando el componente hijo ya esté creado será demasiado tarde como para modificar el componente padre en el mismo ciclo (debido a la estructura en árbol del detector de cambios), por tanto, es necesario esperar un tiempo, y esto se consigue utilizando por ejemplo un setTimeOut.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setTimeout(() =&amp;gt; this.childComponent.doStuff(), 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para ver el código del post:
&lt;a href=&#34;https://github.com/adrianabreu/angular_viewchild_lifecycle&#34;&gt;https://github.com/adrianabreu/angular_viewchild_lifecycle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para más información:
&lt;a href=&#34;https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html#smarter-change-detection&#34;&gt;https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html#smarter-change-detection&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como construir un portfolio</title>
      <link>http://adrianabreu.github.io/post/2017-03-12-Como-construir-un-portfolio/</link>
      <pubDate>Sun, 12 Mar 2017 10:39:22 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-03-12-Como-construir-un-portfolio/</guid>
      <description>

&lt;p&gt;Desde hace un tiempo en los países anglosajones los desarrolladores tienen una herramienta más importante que su CV, el portfolio.&lt;/p&gt;

&lt;p&gt;Un portfolio no es más que una muestra de tus trabajos y una justificación de las habilidades escritas en tu CV. A día de hoy, es increíblemente fácil tener un portfolio. Pero ya que voy a hablar de eso, aprovecharé para hablar también de qué debería contener un portfolio, y como enfocar el portfolio de un desarrollador junior proporcionando algunas ideas básicas.&lt;/p&gt;

&lt;h2 id=&#34;1-donde-alojar-el-portfolio&#34;&gt;1. Donde alojar el portfolio&lt;/h2&gt;

&lt;p&gt;Aunque puede que tengas tu propio host o vps, creo que lo más sensato es utilizar github. &lt;a href=&#34;https://pages.github.com/&#34;&gt;En la propia página de github&lt;/a&gt; explican como tener tu web: &amp;ldquo;username.github.io&amp;rdquo;. De hecho, es donde ahora mismo está alojado este blog.&lt;/p&gt;

&lt;h2 id=&#34;2-contenidos-de-un-portfolio&#34;&gt;2. Contenidos de un portfolio&lt;/h2&gt;

&lt;p&gt;Aquí empieza a abrirse el abanico de opciones. En general, la creatividad se premia, pero vamos a centrarnos en algunos conceptos clave:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tus datos de contacto deben ser visibles. Un gran error de un portfolio es no dar visibilidad a la sección de contacto o carecer de los famosos iconos de redes sociales.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Debe ser una muestra de tu trabajo, no tiene por qué ser muy extenso. Lo más sensato es que tengas alguna pequeña imagen, una breve descripción y un enlace para probar el proyecto.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Muestra a qué puesto te gustaría aspirar, que rama te interesa más, si te interesa entrar en algún sector en concreto, etcétera.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;NO PONGAS UNA LISTA DE LENGUAJES / HABILIDADES Y LE DES UNA PUNTUACIÓN A CADA UNO DE ELLOS&lt;/strong&gt;. Aunque no quería ponerlo, creo que es importante resaltarlo. Valorarse a uno mismo es un error &lt;strong&gt;casi tan grande como poner todos los lenguajes que has tocado para intentar parecer que tienes un gran dominio&lt;/strong&gt;. En la carrera trabajé con C++ un par de cursos. ¿Me pongo ya un 5 sobre 5 en C++? &lt;a href=&#34;https://www.slideshare.net/olvemaudal/deep-c/255&#34;&gt;El creador del lenguaje se pone a sí mismo un 7 sobre 10&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;También debe hablar algo de ti, tus aficiones. Seguimos siendo personas, y no un conjunto de datos.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Con esto ya tenemos lo básico para un portfolio.&lt;/p&gt;

&lt;p&gt;Pero claro, se plantea una duda. Una persona que se dedique altamente al front-end, va a tener muy fácil el destacar. Ya que sus proyectos son usables y visibles. Por otro lado, alguien que quiera enfocarse más al backend no lo va a tener tan sencillo. Para estos últimos recomiendo que describan su proyecto. Que planteen el problema y que estructura se siguió para resolverlo.&lt;/p&gt;

&lt;p&gt;Por ejemplo:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WordreferenceBot es un bot para telegram que permite traducir palabras del inglés al español y viceversa. Utiliza NodeJS para hacer webscraping de la página de wordreference y luego genera un mensaje en formato markdown para telegram.
Para mejorar los tiempos de respuesta las traducciones se almacenan en una base de datos (MongoDB) de tal forma que queden cacheadas, así, cuánto más se use, más rápido responderá.&lt;/p&gt;

&lt;p&gt;Además se ha añadido un endpoint web utilizando ejs donde se puede ver en tiempo real la cantidad de palabras almacenada en la base de datos gracias al uso de websockets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Con esto queda más o menos claro las herramientas que hemos utilizado en el proyecto y como lo hemos enfocado.&lt;/p&gt;

&lt;h2 id=&#34;3-qué-utilizo-para-portfolio&#34;&gt;3. ¿Qué utilizo para portfolio?&lt;/h2&gt;

&lt;p&gt;Este tema lo reflexionado bastante y creo que tras leer múltiples opiniones, lo mejor es utilizar un html estático.&lt;/p&gt;

&lt;p&gt;Aplica tu creatividad y si eres bueno en tema de diseño quizás quieras demostrar más habilidades aún evitando utilizar bootstrap y jQuery.&lt;/p&gt;

&lt;p&gt;También, al igual que yo puedes hacer utilizar algún generador estático, como por ejemplo: &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; (Ruby), &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt; (Node) o &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; (Go).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://adrianabreu.com/post/2017-03-04-Why-you-should-start-a-blog/&#34;&gt;Hace unas entradas&lt;/a&gt; argumenté las ventajas de tener un blog y de escribir las cosas que se van aprendiendo.&lt;/p&gt;

&lt;h2 id=&#34;4-qué-podría-usar-para-rellenar-el-portfolio&#34;&gt;4. ¿Qué podría usar para rellenar el portfolio?&lt;/h2&gt;

&lt;p&gt;La creatividad manda, no hace falta elaborar proyectos complicados, pero creo que existen una serie de puntos que dbeerían estar en tu portfolio.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Demostrar tu dominio del DOM: Hacer algún proyecto sencillo que interactúe con el DOM. Algo tan simplecomo una lista de la compra que vaya creando y borrando elementos y cantidad puede ser un buen ejemplo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Demostrar que sabes AJAX: Hacer un cliente para alguna api abierta. Por ejemplo yo hice un cliente en angular para una API que daba frases de Chuck Norris. Existen muchas apis abiertas, &lt;a href=&#34;https://github.com/toddmotto/public-apis&#34;&gt;aquí tienes una lista&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Demostrar que conoces &amp;ldquo;la parte de atrás&amp;rdquo;: Montar un CRUD en backend, ofreciendo y diseñando tu mismo la API y realizando persistencia en base de datos.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;5-y-que-hago-con-todos-estos-proyectos&#34;&gt;5. ¿Y que hago con todos estos proyectos?&lt;/h2&gt;

&lt;p&gt;Lo primero sería publicarlos en github, eso como base. Así se puede ver como trabajas a través de tu historial de commits.&lt;/p&gt;

&lt;p&gt;Ahora, para los proyectos de front (html, css y js), si creas una rama &amp;ldquo;gh-pages&amp;rdquo; en el repositorio, puedes acceder &amp;ldquo;in vivo&amp;rdquo; al proyecto a traves de la dirección &lt;strong&gt;username.github.io/nombredelrepositorio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ahora, para el tema del backend, existen unas cuantas soluciones gratuitas. Por enumerar los que he probado: &lt;a href=&#34;https://dashboard.heroku.com/login&#34;&gt;Heroku&lt;/a&gt;, &lt;a href=&#34;https://imagine.microsoft.com/en-us/Catalog/Product/99&#34;&gt;Microsoft Azure (plan de estudiantes)&lt;/a&gt;, &lt;a href=&#34;https://www.openshift.com/&#34;&gt;Openshift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Así que no necesitas invertir en host ni en vps para poder alojar tus aplicaciones.&lt;/p&gt;

&lt;h2 id=&#34;6-ejemplos&#34;&gt;6. ¿Ejemplos?&lt;/h2&gt;

&lt;p&gt;Ya que ahora mismo mi blog no es un gran ejemplo. (&lt;strong&gt;Excusa&lt;/strong&gt;: No he parado de irme de un sitio a otro para decidir que iba a utilizar como geneador hasta decidirme por hugo). Voy a aprovechar para dejar algunos buenos ejemplos de portfolio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zertukis.com/&#34;&gt;http://zertukis.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jordancarney.com/&#34;&gt;http://jordancarney.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrisgreg.github.io/Portfolio/index.html&#34;&gt;https://chrisgreg.github.io/Portfolio/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jamesiv.es/&#34;&gt;http://jamesiv.es/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-conclusiones&#34;&gt;7. Conclusiones:&lt;/h2&gt;

&lt;p&gt;Espero que estos pasos sirvan de guía para alguien y tenga las cosas más claras a la hora de crear su propio portfolio.&lt;/p&gt;

&lt;p&gt;Ante cualquier duda o sugerencia, podéis contactar conmigo a través de &lt;a href=&#34;https://twitter.com/aabreuglez&#34;&gt;twitter&lt;/a&gt; o &lt;a href=&#34;mailto:me@adrianabreu.com&#34;&gt;email&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chuck Norris Angular 2 Client</title>
      <link>http://adrianabreu.github.io/projects/chucknorrisangular2client/</link>
      <pubDate>Sat, 11 Mar 2017 18:04:42 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/projects/chucknorrisangular2client/</guid>
      <description>&lt;p&gt;Una actualización del cliente para la API de Chuck Norris, hecho ahora en Angular 2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sin componentes a componentes</title>
      <link>http://adrianabreu.github.io/post/2017-03-11-Sin-componentes-a-componentes/</link>
      <pubDate>Sat, 11 Mar 2017 17:44:11 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-03-11-Sin-componentes-a-componentes/</guid>
      <description>&lt;p&gt;Hace unos meses mientras me formaba en Angular 1 hice con un amigo un cliente para una api que proporcionaba frases de Chuck Norris.&lt;/p&gt;

&lt;p&gt;Fue un desarrollo divertido donde almacenábamos las frases descargadas en localStorage y permítiamos filtrar las frases por categorías.&lt;/p&gt;

&lt;p&gt;El diseño era modular y me quedé contento con lo que aprendí. Pero entonces entré en prácticas en la empresa y me puse a formarme en Angular 2.&lt;/p&gt;

&lt;p&gt;Y ahí me encontré que había un nuevo concepto, los componentes. En el mundo de angular vi: directivas, controladores, servicios, módulos&amp;hellip;  Pero en el mundo de Angular 2 entraron los &lt;strong&gt;componentes&lt;/strong&gt; en juego.&lt;/p&gt;

&lt;p&gt;Lo primero, ¿qué son los componentes? Los componentes vienen a ser los bloques de construcción de la aplicación, viene a ser cualquier cosa que sea visible para el usuario final y que además, se puede utilizar muchas veces en una aplicación.&lt;/p&gt;

&lt;p&gt;Así que ahora, unos meses más tarde, he rehecho el cliente en Angular 2 y se pueden observar las diferencias entre las tecnologías.&lt;/p&gt;

&lt;p&gt;La verdad es que prefiero mucho más Angular 2, y en mi opinión, el nuevo código es mucho más comprensible.&lt;/p&gt;

&lt;p&gt;De hecho para añadirle más fuerza al argumento a favor de los componentes, a partir de la versión 1.5 de Angular también existe el concepto de componente.&lt;/p&gt;

&lt;p&gt;Pero como siempre, creo que es mejor que sea el lector el que compare, así que aquí dejo los links a ambos repositorios:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adrianabreu/chuck-norris-angular-client&#34;&gt;ChuckNorrisAngularClient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adrianabreu/chuck-norris-angular2-client&#34;&gt;ChuckNorrisAngular2Client&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quizás deberías empezar un blog</title>
      <link>http://adrianabreu.github.io/post/2017-03-04-Why-you-should-start-a-blog/</link>
      <pubDate>Sat, 04 Mar 2017 19:46:22 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-03-04-Why-you-should-start-a-blog/</guid>
      <description>&lt;p&gt;Me encanta leer artículos de programación y de tecnología. Leo muchísimos artículos.&lt;/p&gt;

&lt;p&gt;Es más, considero que paso al menos de media, 2 horas diarias leyendo esta clase de artículos.&lt;/p&gt;

&lt;p&gt;Pero soy otro lector invisible más, no devuelvo lo que aprendo a la comunidad (aunque ahora me he ido animando con los comentarios) y lo peor, no lo almaceno.&lt;/p&gt;

&lt;p&gt;Un blog puede ser una parte más de tu portfolio, puede recoger tus dudas y tu avance. Recuerdo, leer muchos artículos del blog de &lt;a href=&#34;https://giltesa.com/&#34;&gt;giltesa&lt;/a&gt;, aunque en aquellos momentos yo estaba programando en pañales, me gustaba mucho ver los pequeños códigos en C que ponía.&lt;/p&gt;

&lt;p&gt;Por supuesto, al igual que con el código, también ocurre lo contrario. Que no quieras compartir los pequeños códigos que haces, ya sea porque te de vergüenza o porque realmente crees que no vale la pena. Pero yo opino lo contrario. Creo que, en este punto, cualquier aporte que harás te ayudará a reflexionar sobre lo que sabes, por donde vas. Y aportará, quizás no a la comunidad, pero sí a tu yo del mañana.&lt;/p&gt;

&lt;p&gt;Así que, quizás deberías empezar un blog.&lt;/p&gt;

&lt;p&gt;Actualización 05-03-2017: Como curiosidad, hoy han abierto un hilo en reddit acerca de esto mismo: &lt;a href=&#34;https://www.reddit.com/r/webdev/comments/5xmu09/developers_apart_from_your_95_or_studying_what/&#34;&gt;Developers, apart from your 9-5 or studying, what activities have you found effective at boosting your career ? (blogging? open source? networking etc.)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En las primeras respuestas, ya se ve claro: &lt;strong&gt;&amp;ldquo;Blogging has definitely helped me with my career, in more ways than one.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Probando Hugo</title>
      <link>http://adrianabreu.github.io/post/2017-02-05-Probando-hugo/</link>
      <pubDate>Sun, 05 Feb 2017 17:31:42 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-02-05-Probando-hugo/</guid>
      <description>&lt;p&gt;La verdad es que estoy asombrado. Hexo me tenía muy contento, pero aún así el rendimiento no me convencía tanto como esperaba. Y me pasaba los días dando largas hasta ponerme a postear. Aprovechando que quería hacer una pequeña limpieza antes de ponerme con el trabajo de fin de grado, he estado mirando este generador, Hugo.&lt;/p&gt;

&lt;p&gt;Este generador basado en el lenguaje Go, es increíblemente potente, portable, y sencillo de instalar. Sinceramente, tras probar Jekyll, Hexo y Hugo, sin duda me quedo con este último. Habia visto otros como Octopress, pero tampoco llegó a convencerme.&lt;/p&gt;

&lt;p&gt;Si por casualidad queréis hacer un blog estático, ya sea para vuestra página personal o para alguna web de contenido, mi opinión es clara.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contáctame</title>
      <link>http://adrianabreu.github.io/about/</link>
      <pubDate>Sun, 05 Feb 2017 16:28:10 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/about/</guid>
      <description>&lt;p&gt;Si estás interesado en contactar conmigo puedes encontrarme a través de:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://github.com/adrianabreu&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/aabreuglez&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://linkedin.com/in/adrianabreu&#34;&gt;Linkedin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O incluso a través de mi correo electrónico: &lt;strong&gt;&lt;a href=&#34;mailto:me@adrianabreu.com&#34;&gt;me@adrianabreu.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nuevos comienzos</title>
      <link>http://adrianabreu.github.io/post/2017-01-08-Nuevos-comienzos/</link>
      <pubDate>Sun, 08 Jan 2017 10:22:36 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/post/2017-01-08-Nuevos-comienzos/</guid>
      <description>&lt;p&gt;No creía que fuera a estar escribiendo esto tan pronto, pero hace poco terminé de realizar las prácticas externas y ya tengo un trabajo en esa misma empresa.&lt;/p&gt;

&lt;p&gt;Mis labores, al igual que en las prácticas, consiste en desarrollar utilizando Angular 2 y Java.&lt;/p&gt;

&lt;p&gt;He ido aprendiendo (y sigo, y seguiré) muchísimo. Y es por eso que necesito este blog. Un lugar donde compartir toda la información que voy absorbiendo sobre esta tecnología que cada día me gusta más.&lt;/p&gt;

&lt;p&gt;Ahora mismo, me debato sobre si mi Trabajo Final de Grado será también Angular 2. En unas semanas espero tenerlo más claro (por ahora pinta que sí, pero React pega fuerte).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chuck Norris Angular Client</title>
      <link>http://adrianabreu.github.io/projects/chucknorrisangularclient/</link>
      <pubDate>Fri, 11 Nov 2016 13:20:57 +0000</pubDate>
      
      <guid>http://adrianabreu.github.io/projects/chucknorrisangularclient/</guid>
      <description>&lt;p&gt;Un cliente realizado en AngularJS que consume una api externa y te permite conseguir frases divertidas de Chuck Norris.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>